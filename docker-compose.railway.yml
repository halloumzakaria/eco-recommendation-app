# Railway-optimized Docker Compose configuration
version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-eco_recommendation}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-eco_recommendation}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    command: ["./wait-for-it.sh", "postgres:5432", "--", "npm", "start"]

  nlp_api:
    build:
      context: ./backend/nlp_api
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-eco_recommendation}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:5000/api}
        - REACT_APP_NLP_API_URL=${REACT_APP_NLP_API_URL:-http://localhost:5001}
    restart: on-failure
    ports:
      - "3000:3000"
    depends_on:
      - backend

volumes:
  pgdata:
