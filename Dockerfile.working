# Working Dockerfile for Railway deployment
FROM node:18-alpine AS frontend-builder

# Set working directory
WORKDIR /app/frontend

# Copy frontend package files
COPY frontend/package*.json ./

# Install frontend dependencies
RUN npm install --omit=dev

# Copy frontend source code
COPY frontend/ .

# Build frontend
RUN npm run build

# Backend stage
FROM node:18-alpine AS backend-builder

# Set working directory
WORKDIR /app/backend

# Copy backend package files
COPY backend/package*.json ./

# Install backend dependencies
RUN npm install --omit=dev

# Copy backend source code
COPY backend/ .

# NLP API stage - Use python:3.12-slim instead of alpine for better package support
FROM python:3.12-slim AS nlp-builder

# Set working directory
WORKDIR /app/nlp_api

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy NLP requirements
COPY backend/nlp_api/requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy NLP source code
COPY backend/nlp_api/ .

# Final stage
FROM node:18-alpine

# Install Python and system dependencies
RUN apk add --no-cache python3 py3-pip postgresql-client

# Set working directory
WORKDIR /app

# Copy built frontend
COPY --from=frontend-builder /app/frontend/build ./frontend/build

# Copy backend
COPY --from=backend-builder /app/backend ./backend

# Copy NLP API
COPY --from=nlp-builder /app/nlp_api ./nlp_api

# Install serve globally for frontend
RUN npm install -g serve

# Copy wait script
COPY backend/wait-for-it.sh ./wait-for-it.sh
RUN chmod +x ./wait-for-it.sh

# Create a startup script
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'echo "Starting Eco Recommendation App..."' >> /app/start.sh && \
    echo 'cd /app/backend && npm start &' >> /app/start.sh && \
    echo 'sleep 5' >> /app/start.sh && \
    echo 'cd /app/nlp_api && python app.py &' >> /app/start.sh && \
    echo 'sleep 5' >> /app/start.sh && \
    echo 'cd /app && serve -s frontend/build -l 3000' >> /app/start.sh && \
    chmod +x /app/start.sh

# Expose ports
EXPOSE 3000 5000 5001

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Start command
CMD ["/app/start.sh"]
