# Multi-stage Dockerfile for Railway deployment
FROM node:18-alpine AS frontend-builder

# Set working directory
WORKDIR /app/frontend

# Copy frontend package files
COPY frontend/package*.json ./

# Install frontend dependencies
RUN npm ci --only=production

# Copy frontend source code
COPY frontend/ .

# Build frontend
RUN npm run build

# Backend stage
FROM node:18-alpine AS backend-builder

# Set working directory
WORKDIR /app/backend

# Copy backend package files
COPY backend/package*.json ./

# Install backend dependencies
RUN npm ci --only=production

# Copy backend source code
COPY backend/ .

# NLP API stage
FROM python:3.12-alpine AS nlp-builder

# Set working directory
WORKDIR /app/nlp_api

# Install system dependencies
RUN apk add --no-cache gcc musl-dev postgresql-dev

# Copy NLP requirements
COPY backend/nlp_api/requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy NLP source code
COPY backend/nlp_api/ .

# Final stage
FROM node:18-alpine

# Install Python and system dependencies
RUN apk add --no-cache python3 py3-pip postgresql-client

# Set working directory
WORKDIR /app

# Copy built frontend
COPY --from=frontend-builder /app/frontend/build ./frontend/build

# Copy backend
COPY --from=backend-builder /app/backend ./backend

# Copy NLP API
COPY --from=nlp-builder /app/nlp_api ./nlp_api

# Copy Python dependencies
COPY --from=nlp-builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages

# Copy wait script
COPY backend/wait-for-it.sh ./wait-for-it.sh
RUN chmod +x ./wait-for-it.sh

# Copy docker-compose for Railway
COPY docker-compose.railway.yml ./docker-compose.yml

# Expose ports
EXPOSE 3000 5000 5001

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Start command
CMD ["sh", "-c", "cd backend && npm start & cd nlp_api && python app.py & cd frontend && npx serve -s build -l 3000"]
